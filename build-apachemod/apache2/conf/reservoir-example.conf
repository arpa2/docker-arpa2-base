<!-- Abbreviation:

     %{UUIDPATN} is [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}

     %{SASL_SITEVIEW} is the userview attribute from HTTP SASL, to select a web view

     For an example of LDAP content, see
     https://github.com/arpa2/docker-demo/blob/master/demo-reservoir/example-dump-from-slapcat.ldif


     From: Rick van Rein <rick@openfortress.nl>,
           Henri Manson  <hfmanson@mansoft.nl>

-->

<VirtualHost *:443>

  # Require TLS, and be open to authenticating clients
  TLSPoolEnable on

  <Location />

    # ARPA2ACL host-to-realm mapping removes prefix DNS labels to
    #          distinguish security realms from customers by hostname.
    #          Input from %{HTTP_HOST}, output to %{ARPA2REALM}.
    #          (This is part of the local web configuration setup.)
    ARPA2ACLRealmMap /var/arpa2/acl/host2realm.db

    # Authenticate users with SASL
    AuthName "Reservoir for %{ARPA2REALM}"
    AuthType SASL
    Require valid_user
    #
    # Support SASL mechanisms:
    #   - EXTERNAL for TLS-supplied client identities
    #   - SXOVER for realm crossover to a client realm
    #   - ANONYMOUS to support guest access (limited through ARPA2ACL)
    AuthSASLMechanisms EXTERNAL SXOVER ANONYMOUS
    #
    # Allow clients to provide a username, when the browser supports it
    # through https://username@ forms (no password, that form is deprecated);
    # The coding below also supports /~username path prefixes though.
    #
    AuthSASLUserView on

    # The rewrite mapper for resolving %{SASL_SITEVIEW} and path elements
    PassEnv SASL_SITEVIEW
    RewriteEngine on
    RewriteMap symlink2colluuid prg:/usr/share/arpa2reservoir/contrib/apache/symlink2colluuid
    #LDAP# RewriteMap index2colluuid prg:/usr/share/arpa2reservoir/contrib/apache/index2colluuid

    # Links to error conditions and bypassing trouble
    # (In RewriteMap below, add / after an error page to ignore trailing text.)
    Alias /README.MD /404.cgi
    Alias /401.html /var/www/default/401.cgi
    Alias /403.html /var/www/default/403.cgi
    Alias /404.html /var/www/default/404.cgi


    # Locations that start with: /~username
    # Set %{SASL_SITEVIEW} and later rewrite the location accordingly
    #
    <LocationMatch "^/~(?<username>[^/.][^/]*)(/|$)">

	SetEnv SASL_SITEVIEW="${ENV:MATCH_USERNAME}"
	RewriteRule "^/~[^/.][^/]*(/|$)" "https://${HTTP_HOST}/"

    </LocationMatch>


    # Locations that DO NOT start with: /COLLUUID
    # When a  %{SASL_SITEVIEW} is defined, use the user's index (already setup)
    # When no %{SASL_SITEVIEW} is defined, use the domain index
    # Rewrite the client URI and continue processing for access control
    #
    <LocationMatch "!^/%{UUIDPATN}(/|$)">

	<If "%{SASL_SITEVIEW}" == "">
	  # Use the domain index default (by not providing a name)
	  RewriteRule "^/?" https://${HTTP_HOST}/"${symlink2colluuid:/var/arpa2/reservoir/%{ARPA2REALM}/:404.cgi/}"
	  #LDAP# "^/?" https://${HTTP_HOST}/"${index2colluuid:,associatedDomain=%{ARPA2REALM},ou=Reservoir,o=arpa2.net,ou=InternetWide}/:404.cgi/}"
	<Else>
	  # Use the user's index
	  RewriteRule "^/?" https://${HTTP_HOST}/"${symlink2colluuid:/var/arpa2/reservoir/%{ARPA2REALM}/uid=%{SASL_SITEVIEW}/:404.cgi/}"
	  #LDAP# "^/?" https://${HTTP_HOST}/"${index2colluuid:,uid=%{SASL_SITEVIEW},associatedDomain=%{ARPA2REALM},ou=Reservoir,o=arpa2.net,ou=InternetWide}/:404.cgi/}"
	</If>

    </LocationMatch>


    #
    # From here on, all non-error paths start with a /COLLUUID
    #


    # Locations that start with: /COLLUUID
    # Those should be subject to access control through the ARPA2ACL
    #
    <LocationMatch "^/(?<colluuid>%{UUIDPATN})(/|$)">

	# ARPA2ACL Resource Class is fixed for Reservoir (see uuid.arpa2.org)
	ARPA2ACLResourceClass "904dfdb5-6b34-3818-b580-b9a0b4f7e7a9"

	# ARPA2ACL Resource Instance is Reservoir's Resource Collection
	#          (Confusing "Resource" terms, due to different naming
	#           scopes for ARPA2ACL and Reservoir.)
	ARPA2ACLResourceInstance "${ENV:MATCH_COLLUUID}"

	# ARPA2 Access Control 
	ARPA2ACLRealm "%{ARPA2REALM}"
	ARPA2ACLDataBase /var/arpa2/acl/reservoir.mdb

	# ARPA2 Rights Mapping (inasfar as different from RESTful default)
	ARPA2ACLRights PUT "W"
    </LocationMatch>


    # Locations that ARE NOT: /COLLUUID/RESUUID or /COLLUUID
    #
    # These must be /COLLUUID/index/path or /COLLUUID/index/path/RESUUID
    # and so they must be resolved by removing /index/path elements.
    # This means iterative lookup of /index/path elements under COLLUUID.
    #
    <LocationMatch "!^/(%{UUIDPATN}(/%{UUIDPATN})?$">

	# Rewrite the URI by traversing the index path
	RewriteRule "^/(?<colluuid>%{UUIDPATN})/(?<indexstep>[^/.][^/]*)(/|$)" https://${HTTP_HOST}/"${symlink2colluuid:/var/arpa2/reservoir/${ARPA2REALM}/${ENV:MATCH_COLLUUID}/${ENV:MATCH_INDEXSTEP}}/:404.cgi/}"
	#LDAP# RewriteRule "^/(?<colluuid>%{UUIDPATN})/(?<indexstep>[^/]+)(/|$)" https://${HTTP_HOST}/"${index2colluuid:${ENV:MATCH_INDEXSTEP},resins=${ENV:MATCH_COLLUUID},associatedDomain=%{ARPA2REALM},ou=Reservoir,o=arpa2.net,ou=InternetWide}/:404.cgi/}"

    </LocationMatch>


    # We may be looking at an index of a collection, /COLLUUID
    #
    <LocationMatch "^/(?<colluuid>%{UUIDPATN})$">

	DocumentRoot /var/arpa2/reservoir/%{ARPA2REALM}
	# ScriptAlias / /usr/share/arpa2reservoir/contrib/apache/index2html/var/arpa2/reservoir/%{ARPA2REALM}/${ENV:COLLUUID}

    </LocationMatch>


    # We should now be able to serve a resource, /COLLUUID/RESUUID
    #
    <LocationMatch "^/(?<colluuid>%{UUIDPATN})/(?<resuuid>%{UUIDPATN})$">

	DocumentRoot /var/arpa2/reservoir/%{ARPA2REALM}

    </LocationMatch>

  </Location>

</VirtualHost>
